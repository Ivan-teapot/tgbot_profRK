name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  black-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'
    
    - name: Install Black
      run: pip install black
    
    - name: Check code formatting with detailed output
      run: |
        echo "üé® Running Black formatting check..."
        echo "üìã Files that need reformatting:"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        black --check . --verbose || true
        
        echo ""
        echo "üîç Detailed diff of changes needed:"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º diff –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        black --diff . --color || true
        
        echo ""
        echo "üí° To fix these issues, run: black ."
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        black --check .

  isort-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'
    
    - name: Install isort
      run: pip install isort
    
    - name: Create isort config
      run: |
        cat > .isort.cfg << EOF
        [settings]
        profile = black
        multi_line_output = 3
        line_length = 88
        known_first_party = app,services,utils
        include_trailing_comma = true
        force_grid_wrap = 0
        use_parentheses = true
        ensure_newline_before_comments = true
        EOF
    
    - name: Check import sorting with detailed output
      run: |
        echo "üì¶ Running isort import sorting..."
        echo "üìã Files that need import sorting:"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        isort --check-only . --verbose || true
        
        echo ""
        echo "üîç Detailed diff of import changes needed:"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º diff –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        isort --diff . --color || true
        
        echo ""
        echo "üí° To fix these issues, run: isort ."
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        isort --check-only .

  flake8-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'
    
    - name: Install Flake8
      run: pip install flake8
    
    - name: Create Flake8 config
      run: |
        cat > .flake8 << EOF
        [flake8]
        max-line-length = 88
        extend-ignore = 
            E203,  # whitespace before ':' (conflicts with black)
            E501,  # line too long (handled by black)
            W503,  # line break before binary operator
            E402,  # module level import not at top of file
            F401,  # imported but unused
            F841,  # local variable is assigned to but never used
        exclude = 
            .git,
            __pycache__,
            build,
            dist,
            .venv,
            venv,
            migrations
        statistics = true
        show-source = true
        EOF
            
    - name: Run Flake8 with detailed output
      continue-on-error: true
      run: |
        echo "üîç Running Flake8 code quality check..."
        echo "üìã Detailed issues found:"
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫
        flake8 . --show-source --statistics || echo "‚ö†Ô∏è Flake8 found some issues (non-critical)"

  mypy-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'
    
    - name: Install MyPy
      run: pip install mypy
    
    - name: Create MyPy config
      run: |
        cat > mypy.ini << EOF
        [mypy]
        python_version = 3.12
        ignore_missing_imports = true
        show_error_codes = true
        show_column_numbers = true
        exclude = 
            migrations/
            .venv/
            venv/
            build/
            dist/
        EOF
    
    - name: Run MyPy with detailed output
      continue-on-error: true
      run: |
        echo "üè∑Ô∏è Running MyPy type checking..."
        echo "üìã Type issues found:"
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å –∫–æ–¥–∞–º–∏ –æ—à–∏–±–æ–∫
        mypy . --show-error-codes || echo "‚ö†Ô∏è MyPy found some type issues (non-critical)"

  docker-build:
    runs-on: ubuntu-latest
    needs: [black-check, isort-check]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build images with cache
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        tags: |
          service-root:ci-${{ github.sha }}
          service-user:ci-${{ github.sha }}

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Save Docker images
      run: |
        echo "üíæ Saving built images..."
        docker save -o /tmp/service-root.tar service-root:ci-${{ github.sha }}
        docker save -o /tmp/service-user.tar service-user:ci-${{ github.sha }}

    - name: Upload Docker images
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: /tmp/*.tar
        retention-days: 1

  docker-test:
    runs-on: ubuntu-latest
    needs: 
      - docker-build
      - flake8-check
      - mypy-check
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: students_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker images
      uses: actions/download-artifact@v4
      with:
        name: docker-images
        path: /tmp

    - name: Load Docker images
      run: |
        echo "üì¶ Loading pre-built images..."
        docker load -i /tmp/service-root.tar
        docker load -i /tmp/service-user.tar

    - name: Create .env file for CI
      run: |
        echo "üîß Creating .env file for CI..."
        cat > .env << EOF
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/students_db
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=students_db
        POSTGRES_HOST=localhost
        POSTGRES_PORT=5432
        SERVICE_ROOT_URL=http://localhost:8000
        SERVICE_USER_URL=http://localhost:8001
        DEBUG=False
        PYTHONPATH=/app
        EOF

    - name: Install network tools
      run: |
        echo "üîß Installing network tools..."
        sudo apt-get update
        sudo apt-get install -y netcat

    - name: Start application services
      run: |
        echo "üöÄ Starting application services..."
        docker compose up -d service-root service-user
        
        wait_intelligently() {
            local service=$1 port=$2 timeout=$3
            echo "‚è≥ Waiting for $service..."
            local start_time=$(date +%s)
            
            while true; do
                if nc -z localhost $port 2>/dev/null; then
                    echo "‚úÖ $service is responding on port $port"
                    return 0
                fi
                
                local logs=$(docker compose logs "$service" --tail=5 2>/dev/null || echo "No logs yet")
                if echo "$logs" | grep -q "ERROR\|Error\|error\|failed\|Failed\|exception\|Exception"; then
                    echo "‚ùå $service has errors:"
                    echo "$logs"
                    return 1
                fi
                
                local status=$(docker compose ps --format json 2>/dev/null | jq -r ".[] | select(.Service==\"$service\") | .Status" 2>/dev/null || echo "unknown")
                if echo "$status" | grep -q "exited\|dead"; then
                    echo "‚ùå $service container has exited: $status"
                    docker compose logs "$service"
                    return 1
                fi
                
                local current_time=$(date +%s)
                local elapsed=$((current_time - start_time))
                if [ $elapsed -gt $timeout ]; then
                    echo "‚ùå Timeout waiting for $service after $timeout seconds"
                    docker compose logs "$service" --tail=20
                    return 1
                fi
                
                if [ $((elapsed % 10)) -eq 0 ]; then
                    echo "Still waiting for $service... ($elapsed seconds)"
                fi
                sleep 2
            done
        }
        
        wait_intelligently "service-root" "8000" 45
        wait_intelligently "service-user" "8001" 45
        echo "üéâ All services are ready and responding!"

    - name: Check services status
      run: |
        echo "üìä Services status:"
        docker compose ps

    - name: Test service connectivity
      run: |
        echo "üåê Testing service connectivity..."
        
        test_endpoint() {
            local url=$1 service=$2 max_attempts=5 attempt=1
            while [ $attempt -le $max_attempts ]; do
                if curl -f -s "$url" > /dev/null; then
                    echo "‚úÖ $service is working! ($url)"
                    return 0
                else
                    echo "Attempt $attempt/$max_attempts: $service not ready yet..."
                    attempt=$((attempt + 1))
                    sleep 3
                fi
            done
            echo "‚ùå $service not responding after $max_attempts attempts"
            return 1
        }
        
        test_endpoint "http://localhost:8000/" "service-root"
        test_endpoint "http://localhost:8001/" "service-user"
        echo "üéâ All connectivity tests passed!"

    - name: Show service logs
      if: always()
      run: docker compose logs

    - name: Cleanup
      if: always()
      run: docker compose down