name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  docker-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build images with cache
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  docker-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file for CI
      run: |
        cat > .env << EOF
        DATABASE_URL=postgresql://postgres:postgres@db:5432/students_db
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=students_db
        POSTGRES_HOST=db
        POSTGRES_PORT=5432
        SERVICE_ROOT_URL=http://service-root:8000
        SERVICE_USER_URL=http://service-user:8001
        DEBUG=False
        PYTHONPATH=/app
        EOF

    - name: Build only needed images
      run: |
        # Собираем только необходимые сервисы
        docker compose build service-root service-user

  test:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Create .env file
      run: |
        cat > .env << EOF
        DATABASE_URL=postgresql://postgres:postgres@db:5432/students_db
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=students_db
        POSTGRES_HOST=db
        POSTGRES_PORT=5432
        SERVICE_ROOT_URL=http://service-root:8000
        SERVICE_USER_URL=http://service-user:8001
        DEBUG=False
        PYTHONPATH=/app
        EOF

    - name: Start services
      run: |
        docker compose up -d db
        sleep 5
        docker compose up -d service-root service-user
        
        # Используем healthchecks вместо sleep
        timeout 120 bash -c 'until docker compose ps | grep healthy; do sleep 2; done'

    - name: Run tests
      run: |
        # Добавьте ваши тесты здесь
        docker compose exec -T service-root python -m pytest
        docker compose exec -T service-user python -m pytest

    - name: Start PostgreSQL
      run: |
        docker run -d \
        --name postgres \
        -e POSTGRES_USER=postgres \
        -e POSTGRES_PASSWORD=postgres \
        -e POSTGRES_DB=students_db \
        -p 5432:5432 \
        postgres:15-alpine
      
        # Ждем готовности БД
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'

    - name: Cleanup
      if: always()
      run: docker compose down