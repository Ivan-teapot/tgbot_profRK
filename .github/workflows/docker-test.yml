name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Критические проверки - блокируют весь CI
  black-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'
    - name: Install and run Black
      run: |
        pip install black
        echo "🎨 Running Black formatting check..."
        black --check . --verbose --diff --color

  isort-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'
    - name: Install and run isort
      run: |
        pip install isort colorama
        echo "📦 Running isort import sorting..."
        isort --check-only . --verbose --diff --color

  # Некритические проверки - не блокируют, но влияют на финальный статус
  flake8-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'
    - name: Install and run Flake8
      run: |
        pip install flake8
        echo "🔍 Running Flake8 code quality check..."
        flake8 . --show-source --statistics

  mypy-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'
    - name: Install and run MyPy
      run: |
        pip install mypy
        echo "🏷️ Running MyPy type checking..."
        mypy . --show-error-codes

  # Основные jobs
  docker-build:
    runs-on: ubuntu-latest
    needs: [black-check, isort-check]  # Только критические
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Build images
      run: |
        echo "🏗️ Building Docker images..."
        docker compose build

  docker-test:
    runs-on: ubuntu-latest
    needs: 
      - docker-build
      - flake8-check
      - mypy-check
    # Запускается если критические проверки прошли И flake8/mypy завершились (успех или неудача)
    if: (needs.docker-build.result == 'success') && ((needs.flake8-check.result == 'success' || needs.flake8-check.result == 'failure') && (needs.mypy-check.result == 'success' || needs.mypy-check.result == 'failure'))
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: students_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file for CI
      run: |
        echo "🔧 Creating .env file for CI..."
        cat > .env << EOF
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/students_db
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=students_db
        POSTGRES_HOST=localhost
        POSTGRES_PORT=5432
        SERVICE_ROOT_URL=http://localhost:8000
        SERVICE_USER_URL=http://localhost:8001
        DEBUG=False
        PYTHONPATH=/app
        EOF

    - name: Start and verify services
      run: |
        echo "🚀 Starting application services..."
        docker compose up -d service-root service-user
        sleep 10
        
        echo "📊 Checking services status..."
        docker compose ps
        
        if docker compose ps | grep -q "Exited"; then
          echo "❌ Some containers exited"
          docker compose logs
          exit 1
        fi
        
        echo "✅ All services running successfully!"

    - name: Run application tests
      run: |
        echo "🧪 Running application tests..."
        # Здесь запускай настоящие тесты, например:
        # docker compose exec -T service-root pytest
        # docker compose exec -T service-user pytest
        echo "✅ Tests completed successfully"

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "📋 Service logs:"
        docker compose logs

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        docker compose down

  # Финальный job для определения общего статуса CI
  ci-status:
    runs-on: ubuntu-latest
    needs: [black-check, isort-check, flake8-check, mypy-check, docker-test]
    if: always()
    steps:
    - name: Determine CI final status
      run: |
        echo "📊 CI Status Summary:"
        echo "Black: ${{ needs.black-check.result }}"
        echo "isort: ${{ needs.isort-check.result }}" 
        echo "Flake8: ${{ needs.flake8-check.result }}"
        echo "MyPy: ${{ needs.mypy-check.result }}"
        echo "Docker Test: ${{ needs.docker-test.result }}"
        
        # Проверяем результаты некритических проверок
        if [[ "${{ needs.flake8-check.result }}" == "failure" ]]; then
          echo "⚠️ Flake8 check failed"
        fi
        
        if [[ "${{ needs.mypy-check.result }}" == "failure" ]]; then
          echo "⚠️ MyPy check failed"
        fi
        
        # Финальный статус зависит только от критических проверок
        if [[ "${{ needs.black-check.result }}" == "success" && "${{ needs.isort-check.result }}" == "success" ]]; then
          echo "✅ CI Status: SUCCESS - Critical checks passed"
          # Выходим с кодом 0 даже если есть warnings
          exit 0
        else
          echo "❌ CI Status: FAILURE - Critical checks failed"
          exit 1
        fi