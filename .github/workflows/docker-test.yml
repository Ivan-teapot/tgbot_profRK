name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install formatting tools
      run: |
        echo "üîß Installing formatting tools..."
        pip install black isort flake8 mypy

    - name: Create configuration files
      run: |
        echo "‚öôÔ∏è Creating configuration files..."
        
        # .flake8 —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
        cat > .flake8 << EOF
        [flake8]
        max-line-length = 88
        extend-ignore = 
            E203,  # whitespace before ':' (conflicts with black)
            E501,  # line too long (handled by black)
            W503,  # line break before binary operator
            E402,  # module level import not at top of file
            F401,  # imported but unused
            F841,  # local variable is assigned to but never used
        exclude = 
            .git,
            __pycache__,
            build,
            dist,
            .venv,
            venv,
            migrations,
            .env
        per-file-ignores = 
            __init__.py:F401
        EOF

                # .isort.cfg –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å black
                cat > .isort.cfg << EOF
        [settings]
        profile = black
        known_first_party = app,services,utils
        multi_line_output = 3
        include_trailing_comma = true
        force_grid_wrap = 0
        use_parentheses = true
        ensure_newline_before_comments = true
        line_length = 88
        EOF

                # mypy.ini –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
                cat > mypy.ini << EOF
        [mypy]
        python_version = 3.11
        warn_return_any = true
        warn_unused_configs = true
        disallow_untyped_defs = false
        ignore_missing_imports = true
        exclude = 
            migrations/
            .venv/
            venv/
            build/
            dist/
        EOF

    - name: Run Black check (with auto-fix attempt)
      id: black
      continue-on-error: true
      run: |
        echo "üé® Running Black formatting check..."
        if black --check .; then
          echo "‚úÖ Black check passed"
          echo "black-passed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Black check failed - showing diff"
          black --diff . || true
          echo "black-passed=false" >> $GITHUB_OUTPUT
        fi

    - name: Run isort check
      id: isort
      continue-on-error: true
      run: |
        echo "üì¶ Running isort import sorting..."
        if isort --check-only .; then
          echo "‚úÖ isort check passed"
          echo "isort-passed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è isort check failed - showing diff"
          isort --diff . || true
          echo "isort-passed=false" >> $GITHUB_OUTPUT
        fi

    - name: Run Flake8 with selected rules
      id: flake8
      continue-on-error: true
      run: |
        echo "üîç Running Flake8 code quality check..."
        if flake8 .; then
          echo "‚úÖ Flake8 check passed"
          echo "flake8-passed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Flake8 found some issues (non-critical)"
          echo "flake8-passed=false" >> $GITHUB_OUTPUT
        fi

    - name: Run MyPy type checking
      id: mypy
      continue-on-error: true
      run: |
        echo "üè∑Ô∏è Running MyPy type checking..."
        if mypy .; then
          echo "‚úÖ MyPy check passed"
          echo "mypy-passed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è MyPy found some type issues (non-critical)"
          echo "mypy-passed=false" >> $GITHUB_OUTPUT
        fi

    - name: Format check summary
      run: |
        echo "üìä Format Check Summary:"
        echo "Black: ${{ steps.black.outputs.black-passed }}"
        echo "isort: ${{ steps.isort.outputs.isort-passed }}"
        echo "Flake8: ${{ steps.flake8.outputs.flake8-passed }}"
        echo "MyPy: ${{ steps.mypy.outputs.mypy-passed }}"
        
        # Fail only –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏
        if [[ "${{ steps.black.outputs.black-passed }}" == "false" ]]; then
          echo "‚ùå Critical: Black formatting failed"
          exit 1
        fi
        
        if [[ "${{ steps.isort.outputs.isort-passed }}" == "false" ]]; then
          echo "‚ùå Critical: Import sorting failed"
          exit 1
        fi
        
        # Flake8 –∏ MyPy –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
        if [[ "${{ steps.flake8.outputs.flake8-passed }}" == "false" ]]; then
          echo "‚ö†Ô∏è Warning: Flake8 found code style issues"
        fi
        
        if [[ "${{ steps.mypy.outputs.mypy-passed }}" == "false" ]]; then
          echo "‚ö†Ô∏è Warning: MyPy found type issues"
        fi

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-format
    if: always() && (needs.lint-and-format.result == 'success' || needs.lint-and-format.result == 'failure')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build images with cache
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Save Docker images
      run: |
        echo "üíæ Saving built images..."
        docker save -o /tmp/service-root.tar service-root:ci-${{ github.sha }}
        docker save -o /tmp/service-user.tar service-user:ci-${{ github.sha }}

    - name: Upload Docker images
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: /tmp/*.tar
        retention-days: 1

  docker-test:
    runs-on: ubuntu-latest
    needs: docker-build  
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: students_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker images
      uses: actions/download-artifact@v4
      with:
        name: docker-images
        path: /tmp

    - name: Load Docker images
      run: |
        echo "üì¶ Loading pre-built images..."
        docker load -i /tmp/service-root.tar
        docker load -i /tmp/service-user.tar

    - name: Create .env file for CI
      run: |
        echo "üîß Creating .env file for CI..."
        cat > .env << EOF
        # Database
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/students_db
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=students_db
        POSTGRES_HOST=localhost
        POSTGRES_PORT=5432
        
        # Services
        SERVICE_ROOT_URL=http://localhost:8000
        SERVICE_USER_URL=http://localhost:8001
        
        # Add other required environment variables here
        DEBUG=False
        PYTHONPATH=/app
        EOF

    - name: Install network tools
      run: |
        echo "üîß Installing network tools..."
        sudo apt-get update
        sudo apt-get install -y netcat

    - name: Start application services
      run: |
        echo "üöÄ Starting application services..."
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pre-built images
        docker compose up -d service-root service-user
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
        wait_intelligently() {
            local service=$1
            local port=$2
            local timeout=$3
            
            echo "‚è≥ Waiting for $service..."
            local start_time=$(date +%s)
            
            while true; do
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±)
                if nc -z localhost $port 2>/dev/null; then
                    echo "‚úÖ $service is responding on port $port"
                    return 0
                fi
                
                # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
                local logs=$(docker compose logs "$service" --tail=5 2>/dev/null || echo "No logs yet")
                if echo "$logs" | grep -q "ERROR\|Error\|error\|failed\|Failed\|exception\|Exception"; then
                    echo "‚ùå $service has errors:"
                    echo "$logs"
                    return 1
                fi
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–º–µ—Ä –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                local status=$(docker compose ps --format json 2>/dev/null | jq -r ".[] | select(.Service==\"$service\") | .Status" 2>/dev/null || echo "unknown")
                if echo "$status" | grep -q "exited\|dead"; then
                    echo "‚ùå $service container has exited: $status"
                    docker compose logs "$service"
                    return 1
                fi
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                local current_time=$(date +%s)
                local elapsed=$((current_time - start_time))
                if [ $elapsed -gt $timeout ]; then
                    echo "‚ùå Timeout waiting for $service after $timeout seconds"
                    echo "üìã Last logs:"
                    docker compose logs "$service" --tail=20
                    return 1
                fi
                
                if [ $((elapsed % 10)) -eq 0 ]; then
                    echo "Still waiting for $service... ($elapsed seconds)"
                fi
                sleep 2
            done
        }
        
        # –ñ–¥–µ–º —Å–µ—Ä–≤–∏—Å—ã
        wait_intelligently "service-root" "8000" 45
        wait_intelligently "service-user" "8001" 45
        
        echo "üéâ All services are ready and responding!"

    - name: Check services status
      run: |
        echo "üìä Services status:"
        docker compose ps
        echo ""
        echo "üîç Container details:"
        docker ps -a

    - name: Test service connectivity
      run: |
        echo "üåê Testing service connectivity..."
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP endpoints
        test_endpoint() {
            local url=$1
            local service=$2
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
                if curl -f -s "$url" > /dev/null; then
                    echo "‚úÖ $service is working! ($url)"
                    return 0
                else
                    echo "Attempt $attempt/$max_attempts: $service not ready yet..."
                    attempt=$((attempt + 1))
                    sleep 3
                fi
            done
            
            echo "‚ùå $service not responding after $max_attempts attempts"
            return 1
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints
        test_endpoint "http://localhost:8000/" "service-root"
        test_endpoint "http://localhost:8001/" "service-user"
        
        echo "üéâ All connectivity tests passed!"

    - name: Run integration tests
      run: |
        echo "üß™ Running integration tests..."
        # –ó–¥–µ—Å—å –≤–∞—à–∏ —Ç–µ—Å—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        # docker compose exec -T service-root pytest
        # docker compose exec -T service-user pytest
        echo "‚úÖ Integration tests completed"

    - name: Show service logs
      if: always()
      run: |
        echo "üìã Service logs:"
        docker compose logs service-root || echo "No service-root logs"
        docker compose logs service-user || echo "No service-user logs"

    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up..."
        docker compose down
        echo "‚úÖ Cleanup completed"